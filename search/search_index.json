{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Basisregisters Vlaanderen \u00b6 License \u00b6 European Union Public Licence (EUPL) The new version 1.2 of the European Union Public Licence (EUPL) is published in the 23 EU languages in the EU Official Journal: Commission Implementing Decision (EU) 2017/863 of 18 May 2017 updating the open source software licence EUPL to further facilitate the sharing and reuse of software developed by public administrations ( OJ 19/05/2017 L128 p. 59\u201364 ).","title":"Home"},{"location":"#welcome-to-basisregisters-vlaanderen","text":"","title":"Welcome to Basisregisters Vlaanderen"},{"location":"#license","text":"European Union Public Licence (EUPL) The new version 1.2 of the European Union Public Licence (EUPL) is published in the 23 EU languages in the EU Official Journal: Commission Implementing Decision (EU) 2017/863 of 18 May 2017 updating the open source software licence EUPL to further facilitate the sharing and reuse of software developed by public administrations ( OJ 19/05/2017 L128 p. 59\u201364 ).","title":"License"},{"location":"build/","text":"Build Script \u00b6 Our build.sh script knows a few tricks. By default it runs with the Test target. The buildserver passes in BITBUCKET_BUILD_NUMBER as an integer to version the results and BUILD_DOCKER_REGISTRY to point to a Docker registry to push the resulting Docker images. NpmInstall \u00b6 Run an npm install to setup Commitizen and Semantic Release . DotNetCli \u00b6 Checks if the requested .NET Core SDK and runtime version defined in global.json are available. We are pedantic about these being the exact versions to have identical builds everywhere. Clean \u00b6 Make sure we have a clean build directory to start with. Restore \u00b6 Restore dependencies for debian.8-x64 and win10-x64 using dotnet restore and Paket. Build \u00b6 Builds the solution in Release mode with the .NET Core SDK and runtime specified in global.json It builds it platform-neutral, debian.8-x64 and win10-x64 version. Test \u00b6 Runs dotnet test against the test projects. Publish \u00b6 Runs a dotnet publish for the debian.8-x64 and win10-x64 version as a self-contained application. It does this using the Release configuration. Pack \u00b6 Packs the solution using Paket in Release mode and places the result in the dist folder. This is usually used to build documentation NuGet packages. Containerize \u00b6 Executes a docker build to package the application as a docker image. It does not use a Docker cache. The result is tagged as latest and with the current version number. DockerLogin \u00b6 Executes ci-docker-login.sh , which does an aws ecr login to login to Amazon Elastic Container Registry. This uses the local aws settings, make sure they are working! Push \u00b6 Executes docker push to push the built images to the registry.","title":"Build Script"},{"location":"build/#build-script","text":"Our build.sh script knows a few tricks. By default it runs with the Test target. The buildserver passes in BITBUCKET_BUILD_NUMBER as an integer to version the results and BUILD_DOCKER_REGISTRY to point to a Docker registry to push the resulting Docker images.","title":"Build Script"},{"location":"build/#npminstall","text":"Run an npm install to setup Commitizen and Semantic Release .","title":"NpmInstall"},{"location":"build/#dotnetcli","text":"Checks if the requested .NET Core SDK and runtime version defined in global.json are available. We are pedantic about these being the exact versions to have identical builds everywhere.","title":"DotNetCli"},{"location":"build/#clean","text":"Make sure we have a clean build directory to start with.","title":"Clean"},{"location":"build/#restore","text":"Restore dependencies for debian.8-x64 and win10-x64 using dotnet restore and Paket.","title":"Restore"},{"location":"build/#build","text":"Builds the solution in Release mode with the .NET Core SDK and runtime specified in global.json It builds it platform-neutral, debian.8-x64 and win10-x64 version.","title":"Build"},{"location":"build/#test","text":"Runs dotnet test against the test projects.","title":"Test"},{"location":"build/#publish","text":"Runs a dotnet publish for the debian.8-x64 and win10-x64 version as a self-contained application. It does this using the Release configuration.","title":"Publish"},{"location":"build/#pack","text":"Packs the solution using Paket in Release mode and places the result in the dist folder. This is usually used to build documentation NuGet packages.","title":"Pack"},{"location":"build/#containerize","text":"Executes a docker build to package the application as a docker image. It does not use a Docker cache. The result is tagged as latest and with the current version number.","title":"Containerize"},{"location":"build/#dockerlogin","text":"Executes ci-docker-login.sh , which does an aws ecr login to login to Amazon Elastic Container Registry. This uses the local aws settings, make sure they are working!","title":"DockerLogin"},{"location":"build/#push","text":"Executes docker push to push the built images to the registry.","title":"Push"}]}